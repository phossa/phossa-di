<?php

namespace Phossa\Di;

use Phossa\Di\Extension\Taggable\TaggableExtension;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-20 at 19:20:11.
 */
class ContainerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Container
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        include_once __DIR__ . '/testData1.php';
        include_once __DIR__ . '/testData2.php';
        $this->object = new Container;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
 	 * getPrivateProperty
 	 *
 	 * @param 	string $propertyName
 	 * @return	the property
 	 */
	public function getPrivateProperty($propertyName) {
		$reflector = new \ReflectionClass($this->object);
		$property  = $reflector->getProperty($propertyName);
		$property->setAccessible(true);

		return $property->getValue($this->object);
	}

    /**
     * definition array format error
     *
     * @covers Phossa\Di\Container::load
     * @expectedException Phossa\Di\Exception\LogicException
     * @expectedExceptionCode Phossa\Di\Message\Message::DEFINITION_FORMAT_ERR
     */
    public function testLoad1()
    {
        // load parameters
        $p1 = [[ 'test.test' => 'one' ]];
        $this->object->load($p1);
    }

    /**
     * definition file missing
     *
     * @covers Phossa\Di\Container::load
     * @expectedException Phossa\Di\Exception\NotFoundException
     * @expectedExceptionCode Phossa\Di\Message\Message::DEFINITION_NOT_FOUND
     */
    public function testLoad2()
    {
        // load file
        $this->object->load('notsuchfile.php');
    }

    /**
     * load parameters from definition file
     *
     * @covers Phossa\Di\Container::load
     */
    public function testLoad3()
    {
        // load file
        $this->object->load(__DIR__.'/Extension/Loader/def1.param.php');
        $this->assertEquals(
            ['cache' => ['bingo']],
            $this->getPrivateProperty('parameters')
        );
    }

    /**
     * definition format error
     *
     * @covers Phossa\Di\Container::load
     * @expectedException Phossa\Di\Exception\LogicException
     * @expectedExceptionCode Phossa\Di\Message\Message::DEFINITION_FORMAT_ERR
     */
    public function testLoad4()
    {
        // load wrong format array
        $this->object->load([]);
    }

    /**
     * test load parameters from array
     *
     * @covers Phossa\Di\Container::load
     */
    public function testLoadParameters()
    {
        // load parameters
        $p1 = [ 'parameters' => [ 'test.test' => 'one']];
        $this->object->load($p1);

        $this->assertEquals(
            [ 'test' => 'one'], $this->invokeMethod('getParameter', ['test'])
        );

        $this->assertEquals(
            'one', $this->invokeMethod('getParameter', ['test.test'])
        );

        // merge parameters
        $p2 = [ 'parameters' => [ 'test.test2' => 'two']];
        $this->object->load($p2);

        $this->assertEquals(
            [ 'test' => 'one', 'test2' => 'two'],
            $this->invokeMethod('getParameter', ['test'])
        );

        // load array
        $p3 = [ 'parameters' => [ 'test' => [ 'test3' => 'three']]];
        $this->object->load($p3);

        $this->assertEquals(
            [ 'test' => 'one', 'test2' => 'two', 'test3' => 'three'],
            $this->invokeMethod('getParameter', ['test'])
        );

        // replace parameters
        $p4 = [ 'parameters' => [ 'test.test' => 'four']];
        $this->object->load($p4);

        $this->assertEquals(
            [ 'test' => 'four', 'test2' => 'two', 'test3' => 'three'],
            $this->invokeMethod('getParameter', ['test'])
        );

        $p5 = [ 'parameters' => [ 'test' =>
                [ 'test' => 'wow', 'test3' => 'wow2']]];
        $this->object->load($p5);

        $this->assertEquals(
            [ 'test' => 'wow', 'test2' => 'two', 'test3' => 'wow2'],
            $this->invokeMethod('getParameter', ['test'])
        );

        $p6 = [ 'parameters' => [ 'test' => 'six']];
        $this->object->load($p6);

        $this->assertEquals(
            'six', $this->invokeMethod('getParameter', ['test'])
        );
    }

    /**
     * test load services
     *
     * @covers Phossa\Di\Container::load
     */
    public function testLoadServices()
    {
        // init values
        $class = '\\Phossa\\Di\\Container';
        $call  = function() { return true; };

        // id => 'classname'
        $s1 = [ 'services' => [ 'container' => $class]];
        $this->object->load($s1);
        $o1 = $this->getPrivateProperty('services')['container'];
        $this->assertEquals(['class' => [$class]], $o1);

        // id => callable()
        $s2 = [ 'services' => [ 'container' => $call ]];
        $this->object->load($s2);
        $o2 = $this->getPrivateProperty('services')['container'];
        $this->assertTrue($o2['class'][0] instanceof \Closure);

        // id => [ 'classname', arguments[] ]
        $s3 = [ 'services' => [ 'container' => [$class, []]]];
        $this->object->load($s3);
        $o3 = $this->getPrivateProperty('services')['container'];
        $this->assertEquals(['class' => [$class, []]], $o3);

        // id => [ callable(), arguments[] ]
        $s4 = [ 'services' => [ 'container' => [$call, []]]];
        $this->object->load($s4);
        $o4 = $this->getPrivateProperty('services')['container'];
        $this->assertEquals(['class' => [$call, []]], $o4);

        // id => ['class' => [ 'classname', arguments[] ]];
        $s5 = [ 'services' => [ 'container' => ['class'=> [$class, []]]]];
        $this->object->load($s5);
        $o5 = $this->getPrivateProperty('services')['container'];
        $this->assertEquals(['class' => [$class, []]], $o5);

        // id => ['class' => [ callable(), arguments[] ]]
        $s6 = [ 'services' => [ 'container' => ['class' => [$call, [] ]]]];
        $this->object->load($s6);
        $o6 = $this->getPrivateProperty('services')['container'];
        $this->assertEquals(['class' => [$call, []]], $o6);
    }

    /**
     * test load mappings
     *
     * @covers Phossa\Di\Container::load
     */
    public function testLoadMappings()
    {
        // init values
        $s1 = [ 'mappings' => [ 'interface' => 'classname' ]];
        $this->object->load($s1);
        $o1 = $this->getPrivateProperty('mappings')['interface'];
        $this->assertEquals('classname', $o1);
    }

    /**
     * @covers Phossa\Di\Container::has
     */
    public function testHas1()
    {
        // turn off autowiring
        $this->object->auto(false);

        // must be string
        $this->assertFalse($this->object->has(['AA']));

        // not defined
        $this->assertFalse($this->object->has('WW'));

        // define it, and check again
        $this->object->add('WW', 'AA');
        $this->assertTrue($this->object->has('WW'));

        $this->assertFalse($this->object->has('BB'));

        // autowired, if BB is a class
        $this->object->auto(true); // turn on autowiring
        $this->assertTrue($this->object->has('BB'));
    }

    /**
     * shared object D
     *
     * @covers Phossa\Di\Container::get
     */
    public function testGet1()
    {
        // default autowiring is ON
        $a = $this->object->get('AA');
        $this->assertTrue($a->getB()->getD() === $a->getC()->getD());
    }

    /**
     * single object D
     *
     * @covers Phossa\Di\Container::get
     */
    public function testGet2()
    {
        // set single scope for class DD
        $this->object->add('DD', 'DD')->addScope(Container::SCOPE_SINGLE);

        $a = $this->object->get('AA');
        $this->assertFalse($a->getB()->getD() === $a->getC()->getD());
    }

    /**
     * Circular detection
     *
     * @covers Phossa\Di\Container::get
     * @expectedException Phossa\Di\Exception\LogicException
     * @expectedExceptionCode Phossa\Di\Message\Message::SERVICE_CIRCULAR
     */
    public function testGet3()
    {
        $this->object->get('ZAA');
    }

    /**
     * Object DD is shared only under QQ tree, different QQ has different DD
     *
     * @covers Phossa\Di\Container::get
     */
    public function testGet4()
    {
        include_once __DIR__ . '/testData4.php';

        // mark DD scope follows QQ
        $this->object->add('DD')->addScope('QQ');

        // DD is shared under same QQ
        $q1 = $this->object->one('QQ');
        $this->assertTrue($q1->getD() === $q1->getR()->getD());

        // try different QQ
        $q2 = $this->object->one('QQ');
        $this->assertTrue($q2->getD() === $q2->getR()->getD());
        $this->assertFalse($q1->getD() !== $q2->getD());
    }

    /**
     * @covers Phossa\Di\Container::one
     */
    public function testOne()
    {
        $first  = $this->object->one('AA');
        $second = $this->object->one('AA');

        $this->assertTrue($first !== $second);

        // but dependencies is the same
        $this->assertTrue($first->getB() === $second->getB());
    }

    /**
     * @covers Phossa\Di\Container::run
     */
    public function testRun1()
    {
        $aa = $this->object->get('AA');
        $this->object->run(['@AA@', 'setX']);

        $this->assertTrue($aa->getX() instanceof \bingoXX);
    }

    /**
     * @covers Phossa\Di\Container::setTags
     */
    public function testSetTags()
    {
        $tags = ['WOW'];
        $ext = $this->invokeMethod(
            'getExtension',
            [ TaggableExtension::EXTENSION_NAME ]
        );

        $this->assertFalse($ext->matchTags($tags));
        $this->object->setTags($tags);
        $this->assertTrue($ext->matchTags($tags));
    }

    /**
     * @covers Phossa\Di\Container::setDelegate
     */
    public function testSetDelegate()
    {
        $delegator = new \Phossa\Di\Extension\Delegate\Delegator();
        $this->object->setDelegate($delegator);
        $this->assertTrue($this->object === $delegator->getContainers()[0]);
    }

    /**
     * @covers Phossa\Di\Container::setDecorate
     */
    public function testSetDecorate()
    {
        $aa1 = $this->object->get('AA');
        $this->assertNull($aa1->getD());

        // set container with decorating rules
        $this->object->setDecorate('setD', 'AA', ['setD', ['@DD@']]);

        // get new decorated aa
        $aa2 = $this->object->one('AA');
        $this->assertTrue($aa2->getD() instanceof \DD);
    }

    /**
     * @covers Phossa\Di\Container::addProvider
     */
    public function testAddProvider()
    {
        // load prividers
        include_once __DIR__ . '/Extension/Provider/TestProvider.php';

        // not XX found
        $this->assertFalse($this->object->has('XX'));

        // provider
        $p = new \Phossa\Di\Extension\Provider\TestProvider();

        $this->object->addProvider($p);

        // now found XX
        $this->assertTrue($this->object->has('XX'));

        $this->object->get('XX');
        $this->assertTrue($this->object->get('XX') instanceof \bingoXX);
    }

    /**
     * @covers Phossa\Di\Container::addExtension
     */
    public function testAddExtension()
    {
        $ext  = new \Phossa\Di\Extension\Provider\ProviderExtension;
        $name = $ext->getName();
        $this->object->addExtension($ext);
        $exts = $this->getPrivateProperty('extensions');
        $this->assertTrue($ext === $exts[$name]);
    }

    /**
     * @covers Phossa\Di\Container::set
     */
    public function testSet()
    {
        // right
        $this->object->set('dot.dot', '@CC@');
        $params = $this->getPrivateProperty('parameters');
        $this->assertTrue('@CC@' === $params['dot']['dot']);
    }

    /**
     * @covers Phossa\Di\Container::add
     */
    public function testAdd()
    {
        $this->object->add('AA', 'CC');
        $this->assertTrue($this->object->get('AA') instanceof \CC);
    }

    /**
     * @covers Phossa\Di\Container::map
     */
    public function testMap1()
    {
        // get aa
        $aa = $this->object->get('AA');

        // map interface to classname
        $this->object->map('JJInterface', 'JJ');
        $kk = $this->object->get('KK');

        // map interface to $id
        $this->object->map('JJInterface', '@AA@');
        $kk = $this->object->one('KK');
        $this->assertTrue($aa === $kk->getJ());
    }

    /**
     * @covers Phossa\Di\Container::addMethod
     * @todo   Implement testAddMethod().
     */
    public function testAddMethod()
    {
        // test addMethod
        $this->object->add('AA')
                     ->addMethod('setMore', ['xx', 'yy']);
        $this->expectOutputString('CC xx DD yy CC yy DD xx ');
        $this->object->one('AA');

        $this->object->add('AA')
                     ->addMethod('setMore', ['@CC@', 'yy', 'xx']);
        $this->object->one('AA');
    }

    /**
     * @covers Phossa\Di\Container::addScope
     */
    public function testAddScope()
    {
        $this->object->add('AA')
             ->addScope('WOW');

        $aa1 = $this->object->get('AA');
        $aa2 = $this->object->get('AA', [], 'AntherScope');
        $this->assertFalse($aa1 === $aa2);

        $aa3 = $this->object->get('AA', [], 'WOW');
        $this->assertTrue($aa1 === $aa3);
    }
}
