<?php

namespace Phossa\Di\Extension\Decorate;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-21 at 09:31:26.
 */
class DecorateExtensionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var DecorateExtension
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DecorateExtension;
        include_once dirname(dirname(__DIR__)) . '/testData1.php';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * @covers Phossa\Di\Extension\Decorate\DecorateExtension::setDecorate
     * @covers Phossa\Di\Extension\Decorate\DecorateExtension::decorateService
     */
    public function testSetDecorate()
    {
        // prepare
        $this->object->setContainer(new \Phossa\Di\Container());
        $container = $this->object->getContainer();



        // define 'wow'
        $this->object->setDecorate('wow', 'AA', ['setD', ['@DD@']]);
        $wow  = $this->getPrivateProperty('rules')['wow'];
        $this->assertTrue(is_array($wow));

        // define 'yeah' with concrete closures
        $this->object->setDecorate('yeah',
            function($service) {
                return $service instanceof \BB;
            },
            function($service) use($container) {
                $service->setE($container->get('EE'));
            }
        );
        $yeah = $this->getPrivateProperty('rules')['yeah'];
        $this->assertTrue(is_array($yeah));

        // decorate 'wow' and 'yeah'
        $aa = $container->get('AA');
        $bb = $container->get('BB');

        $this->object->decorateService($aa);
        $this->assertTrue($container->get('DD') === $aa->getD());

        $this->object->decorateService($bb);
        $this->assertTrue($container->get('EE') === $bb->getE());
    }

    /**
     * @covers Phossa\Di\Extension\Decorate\DecorateExtension::setContainer
     */
    public function testSetContainer()
    {
        $container = new \Phossa\Di\Container();
        $this->object->setContainer($container);
        $this->assertTrue($container === $this->getPrivateProperty('container'));
    }

    /**
     * @covers Phossa\Di\Extension\Decorate\DecorateExtension::getContainer
     */
    public function testGetContainer()
    {
        $container = new \Phossa\Di\Container();
        $this->object->setContainer($container);
        $this->assertTrue($container === $this->object->getContainer());
    }

    /**
     * @covers Phossa\Di\Extension\Decorate\DecorateExtension::hasContainer
     */
    public function testHasContainer()
    {
        $container = new \Phossa\Di\Container();
        $this->assertFalse($this->object->hasContainer());
        $this->object->setContainer($container);
        $this->assertTrue($this->object->hasContainer());
    }
}
