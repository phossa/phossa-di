<?php
namespace Phossa\Di\Extension\Provider;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-22 at 11:57:38.
 */
class ProviderExtensionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ProviderExtension
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ProviderExtension;
        include_once __DIR__ .'/TestProvider.php';
        include_once __DIR__ .'/TestTagProvider.php';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * Normal add provider
     *
     * @covers Phossa\Di\Extension\Provider\ProviderExtension::addProvider
     */
    public function testAddProvider1()
    {
        $c = new \Phossa\Di\Container();
        $p = new TestProvider();
        $this->object->setContainer($c);
        $this->object->addProvider($p);
        $this->assertTrue(in_array($p, $this->getPrivateProperty('providers')));
    }

    /**
     * Provider with tag but container not
     *
     * @covers Phossa\Di\Extension\Provider\ProviderExtension::addProvider
     */
    public function testAddProvider2()
    {
        // container with no tags defined
        $c = new \Phossa\Di\Container();

        // provide defiend 'TEST' tag
        $p = new TestTagProvider();

        $this->object->setContainer($c);

        // add provider failed
        $this->object->addProvider($p);
        $this->assertFalse(in_array($p, $this->getPrivateProperty('providers')));
    }

    /**
     * Provider and container with matching tags
     *
     * @covers Phossa\Di\Extension\Provider\ProviderExtension::addProvider
     */
    public function testAddProvider3()
    {
        // container with no tags defined
        $c = new \Phossa\Di\Container();

        // provide defiend 'TEST' tag
        $p = new TestTagProvider();

        $this->object->setContainer($c);

        $c->setTags(['TEST']);
        $this->object->addProvider($p);
        $this->assertTrue(in_array($p, $this->getPrivateProperty('providers')));
    }

    /**
     * Try add provider twice
     *
     * @covers Phossa\Di\Extension\Provider\ProviderExtension::addProvider
     * @expectedException Phossa\Di\Exception\LogicException
     * @expectedExceptionCode Phossa\Di\Message\Message::EXT_PROVIDER_DUPPED
     */
    public function testAddProvider4()
    {
        $c = new \Phossa\Di\Container();
        $p = new TestProvider();

        $this->object->setContainer($c);

        $this->object->addProvider($p);
        $this->object->addProvider($p);
    }

    /**
     * @covers Phossa\Di\Extension\Provider\ProviderExtension::providerHas
     */
    public function testProviderHas()
    {
        // container with no tags defined
        $c = new \Phossa\Di\Container();

        // provide defiend 'TEST' tag
        $p = new TestTagProvider();

        $this->object->setContainer($c);

        $c->setTags(['TEST']);
        $this->object->addProvider($p);
        $this->assertTrue(in_array($p, $this->getPrivateProperty('providers')));

        // found
        $this->assertTrue($this->object->providerHas('bingo'));

        // not found
        $this->assertFalse($p === $this->object->providerHas('notfound'));
    }
}
