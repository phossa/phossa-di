<?php

namespace Phossa\Di\Extension\Taggable;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-21 at 09:15:49.
 */
class TaggableExtensionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var TaggableExtension
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TaggableExtension;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * normal case
     *
     * @covers Phossa\Di\Extension\Taggable\TaggableExtension::setTags
     */
    public function testSetTags1()
    {
        // test unique
        $tags = ['test', 'bingo', 'test'];
        $this->object->setTags($tags);

        $this->assertEquals(
            ['test', 'bingo'], $this->getPrivateProperty('tags')
        );
    }

    /**
     * @covers Phossa\Di\Extension\Taggable\TaggableExtension::matchTags
     */
    public function testMatchTags()
    {
        // empty against empty
        $this->assertFalse($this->object->matchTags([]));

        // empty against tag
        $this->assertFalse($this->object->matchTags(['w']));

        // set tags
        $tags = ['test', 'bingo', 'wow'];
        $this->object->setTags($tags);

        // tags against empty
        $this->assertFalse($this->object->matchTags([]));

        // no match
        $this->assertFalse($this->object->matchTags(['w']));

        // match
        $this->assertTrue($this->object->matchTags(['wow']));
    }

}
