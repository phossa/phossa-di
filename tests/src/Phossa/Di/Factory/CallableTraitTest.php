<?php

namespace Phossa\Di\Factory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-20 at 19:20:11.
 */
class CallableTraitTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        include_once dirname(__DIR__) . '/testData1.php';
        $this->object = new \Phossa\Di\Container;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
 	 * getPrivateProperty
 	 *
 	 * @param 	string $propertyName
 	 * @return	the property
 	 */
	public function getPrivateProperty($propertyName) {
		$reflector = new \ReflectionClass($this->object);
		$property  = $reflector->getProperty($propertyName);
		$property->setAccessible(true);

		return $property->getValue($this->object);
	}

    /**
     * @covers Phossa\Di\Factory\CallableTrait::matchObjectWithClass
     */
    public function testMatchObjectWithClass()
    {
        $aa = $this->object->get('AA');

        // normal match
        $this->assertTrue(
            $this->invokeMethod('matchObjectWithClass', ['AA', $aa])
        );
    }

    /**
     * @covers Phossa\Di\Factory\CallableTrait::getObjectByClassname
     */
    public function testGetObjectByClassname()
    {
        // AA not in map, get directly
        $aa = $this->invokeMethod('getObjectByClassname', ['AA']);
        $this->assertTrue($aa instanceof \AA);

        // map class 'CC' => 'DD' (string, classname)
        $this->object->map('CC', 'DD');
        $cc = $this->invokeMethod('getObjectByClassname', ['CC']);
        $this->assertTrue($cc instanceof \DD);

        // map class 'CC' => '@BB@' object
        $this->object->map('CC', '@BB@');
        $bb = $this->invokeMethod('getObjectByClassname', ['CC']);
        $this->assertTrue($bb instanceof \BB);

        // map class 'CC' => '%cache.test%' => 'EE'
        $this->object->map('CC', '%cache.test%');
        $this->object->set('cache.test', 'EE');
        $ee = $this->invokeMethod('getObjectByClassname', ['CC']);
        $this->assertTrue($ee instanceof \EE);
        $this->assertTrue($ee === $this->object->get('EE'));

        // map class 'CC' => '%cache.test%' => '@bingoXX@'
        $this->object->map('CC', '%cache.test%');
        $this->object->set('cache.test', '@bingoXX@');
        $xx = $this->invokeMethod('getObjectByClassname', ['CC']);
        $this->assertTrue($xx instanceof \bingoXX);
        $this->assertTrue($xx === $this->object->get('bingoXX'));
    }

    /**
     * @covers Phossa\Di\Factory\CallableTrait::resolvePseudoCallable
     */
    public function testResolvePseudoCallable()
    {

        // pseudo callable => [ $aa, 'setX']
        $call1 = ['@AA@', 'setX'];
        $res1 = $this->invokeMethod('resolvePseudoCallable', [$call1]);
        $this->assertTrue($res1[0] === $this->object->get('AA'));
        $this->assertTrue(is_callable($res1));

        // map cache.test => '@AA@'
        $this->object->set('cache.test', '@AA@');
        $call2 = [ '%cache.test%', 'setX' ];
        $res2 = $this->invokeMethod('resolvePseudoCallable', [$call2]);
        $this->assertTrue($res2[0] === $this->object->get('AA'));
        $this->assertTrue(is_callable($res2));

        // real callable
        $call3 = function() {};
        $res3 = $this->invokeMethod('resolvePseudoCallable', [$call3]);
        $this->assertTrue($res3 === $call3);
    }

    /**
     * @covers Phossa\Di\Factory\CallableTrait::matchMethodArguments
     */
    public function testMatchMethodArguments1()
    {
        // params [CC $c, $str1, JJ $j, array $arr = [], $str2 = ''];
        $method = new \ReflectionFunction('funcTest');
        $params = $method->getParameters();

        // result: [CC, 'test', JJ, ['a']]
        $args1 = ['test', ['a']];
        $res1 = $this->invokeMethod('matchMethodArguments', [$params, $args1]);
        $this->assertEquals([$this->object->get('CC'), 'test',
            $this->object->get('JJ'), ['a']], $res1);

        // result: [CC, 'wow', JJ]
        $args2 = ['wow'];
        $res2 = $this->invokeMethod('matchMethodArguments', [$params, $args2]);
        $this->assertEquals([$this->object->get('CC'), 'wow',
            $this->object->get('JJ')], $res2);

        // existing CC
        $cc = $this->object->one('CC');
        $args3 = [$cc, 'bingo'];
        $res3 = $this->invokeMethod('matchMethodArguments', [$params, $args3]);
        $this->assertEquals([$cc, 'bingo', $this->object->get('JJ')], $res3);

        // existing JJ
        $jj = $this->object->one('JJ');
        $args4 = ['a', $jj, ['x'], 'b'];
        $res4 = $this->invokeMethod('matchMethodArguments', [$params, $args4]);
        $this->assertEquals([$this->object->get('CC'), 'a', $jj, ['x'], 'b'],
            $res4);
    }

    /**
     * bad
     *
     * @covers Phossa\Di\Factory\CallableTrait::matchMethodArguments
     * @expectedException Phossa\Di\Exception\LogicException
     * @expectedExceptionCode Phossa\Di\Message\Message::PARAMETER_NOT_FOUND
     */
    public function testMatchMethodArguments2()
    {
        // params [CC $c, $str1, JJ $j, array $arr = [], $str2 = ''];
        $method = new \ReflectionFunction('funcTest');
        $params = $method->getParameters();

        $args1 = ['a', 'b'];
        $this->invokeMethod('matchMethodArguments', [$params, $args1]);
    }

    /**
     * Execute callable
     *
     * @covers Phossa\Di\Factory\CallableTrait::executeCallable
     */
    public function testExecuteCallable()
    {
        // case 1
        $this->invokeMethod('executeCallable',
            [['@AA@', 'setX']]
        );
        $this->assertTrue($this->object->get('AA')->getX() instanceof \bingoXX);
    }
}
