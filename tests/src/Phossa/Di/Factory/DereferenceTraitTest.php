<?php

namespace Phossa\Di\Factory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-20 at 19:20:11.
 */
class DereferenceTraitTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        include_once dirname(__DIR__) . '/testData5.php';
        $this->object = new \Phossa\Di\Container;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
 	 * getPrivateProperty
 	 *
 	 * @param 	string $propertyName
 	 * @return	the property
 	 */
	public function getPrivateProperty($propertyName) {
		$reflector = new \ReflectionClass($this->object);
		$property  = $reflector->getProperty($propertyName);
		$property->setAccessible(true);

		return $property->getValue($this->object);
	}

    /**
     * Readme example 3, add a callable
     *
     * @covers Phossa\Di\Container::get
     */
    public function testGet7()
    {
        // turn off autowiring
        $container = $this->object->auto(false);

        // config the cache service with classname and constructor arguments
        $container->add('cache', 'MyCache', [ '@cacheDriver@' ]);
        //var_dump($this->getPrivateProperty('services'));

        // add initialization methods after instantiation
        $container->add('cacheDriver', function() {
                return new \MyCacheDriver();
                })->addMethod('setRoot', [ '%cache.root%' ]);

        // set a parameter which was used in 'cacheDriver'
        $container->set('cache.root', '/var/local/tmp');

        // get cache service by its id
        $cache = $container->get('cache');

        $this->assertTrue('/var/local/tmp' === $cache->getDriver()->getRoot());
    }
}
