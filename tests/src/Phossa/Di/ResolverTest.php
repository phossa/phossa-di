<?php

namespace Phossa\Di;

use Phossa\Config\Parameter;

/**
 * Test resolver with Container
 *
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-20 at 19:20:11.
 */
class ResolverTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    protected $object;

    /**
     * @var array
     */
    protected $data;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Container;

        $this->data = [
            'test1' => '${wow}',
            'test2' => [
                'x1' => 'x1',
                'x2' => 'x2',
            ],
            'wow'  => '${test2.x2}',
        ];
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName) {
        $reflector = new \ReflectionClass($this->object);
        $property  = $reflector->getProperty($propertyName);
        $property->setAccessible(true);
        return $property->getValue($this->object);
    }

    /**
     * resolver related
     *
     * @covers Phossa\Di\Container::setResolver
     * @covers Phossa\Di\Container::getResolver
     * @covers Phossa\Di\Container::hasResolver
     */
    public function testSetResolver()
    {
        $this->assertFalse($this->object->hasResolver());

        // set parameter resolver
        $res = new Parameter($this->data);
        $this->object->setResolver($res);

        $this->assertTrue($this->object->hasResolver());
        $this->assertTrue($res === $this->object->getResolver());
    }

    /**
     * test load parameters from array
     *
     * @covers Phossa\Di\Container::getParameter
     */
    public function testGetParameter()
    {
        $this->object->setResolver(new Parameter($this->data));

        $this->assertEquals(
            'x1', $this->invokeMethod('getParameter', ['test2.x1'])
        );
    }

    /**
     * test load services
     *
     * @covers Phossa\Di\Container::load
     */
    public function testLoadServices()
    {
        $this->object->setResolver(new Parameter($this->data));
        $call  = function($a) { return $a; };

        // id => [ callable(), arguments[] ]
        $service = [ 'services' => [ 'test' => [$call, ['${test1}']]]];
        $this->object->load($service);

        $this->assertTrue('x2' == $this->object->get('test'));
    }
}
