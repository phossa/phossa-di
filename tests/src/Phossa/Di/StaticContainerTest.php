<?php
namespace Phossa\Di;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-25 at 10:13:52.
 */
class StaticContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StaticContainer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * Get has etc.
     * 
     * @covers Phossa\Di\StaticContainer::__callStatic
     */
    public function testGet()
    {
        include_once __DIR__ . '/testData1.php';

        $aa1 = StaticContainer::get('AA');
        $aa2 = StaticContainer::get('AA');

        $this->assertTrue($aa1 === $aa2);
        $this->assertTrue($aa1->getB() === $aa2->getB());
    }

    /**
     * Explicit set a container
     *
     * @covers Phossa\Di\StaticContainer::setContainer
     * @covers Phossa\Di\StaticContainer::getContainer
     */
    public function testSetContainer()
    {
        $container = new Container();
        StaticContainer::setContainer($container);
        $this->assertTrue($container === StaticContainer::getContainer());
    }

    /**
     * Get the default container
     *
     * @covers Phossa\Di\StaticContainer::getContainer
     */
    public function testGetContainer()
    {
        $this->assertTrue(
            $container = StaticContainer::getContainer() instanceof Container
        );
    }
}
